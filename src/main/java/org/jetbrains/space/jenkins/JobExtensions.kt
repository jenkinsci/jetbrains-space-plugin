package org.jetbrains.space.jenkins

import hudson.ExtensionList
import hudson.model.Item
import hudson.model.Job
import hudson.security.ACL
import io.ktor.http.*
import jenkins.branch.MultiBranchProject
import jenkins.model.Jenkins
import kotlinx.coroutines.runBlocking
import org.jenkinsci.plugins.workflow.multibranch.BranchJobProperty
import org.jetbrains.space.jenkins.config.*
import org.jetbrains.space.jenkins.scm.SpaceSCMSource
import space.jetbrains.api.runtime.types.*
import java.util.logging.Logger


/**
 * Retrieves the id of the org-level SpaceCode connection for a Jenkins job (either standalone or generated by multibranch project one).
 */
fun Job<*, *>.getSpaceConnectionId() =
    getProperty(SpaceProjectConnectionJobProperty::class.java)?.spaceConnectionId
        ?: getMultiBranchSpaceScmSource()?.spaceConnectionId

fun MultiBranchProject<*,*>.fetchProjectSpaceApp(spaceConnectionId: String, spaceProjectKey: String): SpaceAppRequestResult {
    val (connection, spaceUrl) = getProjectConnection(spaceConnectionId, spaceProjectKey)
        ?: return SpaceAppRequestError(
            statusCode = 404,
            message = "No JetBrains SpaceCode branch source configured for the multi-branch project",
            clientId = null
        )

    return connection.fetchAppState(spaceUrl)
}

fun Job<*,*>.fetchProjectSpaceApp(): SpaceAppRequestResult {
    val (connection, spaceUrl) = getProjectConnection()
        ?: return SpaceAppRequestError(
            statusCode = 404,
            message = "No JetBrains SpaceCode connection configured for the job",
            clientId = null
        )

    return connection.fetchAppState(spaceUrl)
}

fun SpaceProjectConnection.fetchAppState(spaceUrl: String) = runBlocking {
    getApiClient(spaceUrl).use { spaceClient ->
        spaceClient.fetchSpaceAppInfo(
            permissionContextIdentifier = ProjectPermissionContextIdentifier(ProjectIdentifier.Key(projectKey)),
            requiredPermissions = SpaceProjectConnection.requiredPermissions,
            managePermissionsUrl = { app ->
                val ownerApp = app.ownerApp ?: error("SpaceCode project-level application does not have owner application")
                URLBuilder(spaceUrl).apply {
                    appendPathSegments("manage", "integrations", "jenkins")
                    parameters.apply {
                        append("name", ownerApp.name)
                        append("app", ownerApp.id)
                        append("project-app", app.id)
                    }
                }.buildString()
            }
        )
    }
}

fun Job<*,*>.getProjectConnection(): Pair<SpaceProjectConnection, String>? {
    val multiBranchProject = parent as? MultiBranchProject<*, *>
    if (multiBranchProject != null) {
        val source = getMultiBranchSpaceScmSource() ?: return null
        return multiBranchProject.getProjectConnection(source.spaceConnectionId, source.projectKey)
    }

    val jobProperty = getProperty(SpaceProjectConnectionJobProperty::class.java)
    if (jobProperty != null) {
        return ExtensionList.lookupSingleton(SpacePluginConfiguration::class.java)
            .connections.firstOrNull { it.id == jobProperty.spaceConnectionId }
            ?.let { rootConnection ->
                rootConnection.projectConnectionsByJob?.get(fullName)
                    ?.let { it to rootConnection.baseUrl }
            }
    }

    return null
}

fun Job<*, *>.getMultiBranchSpaceScmSource(): SpaceSCMSource? {
    val branchJobProperty = getProperty(BranchJobProperty::class.java)
    val multiBranchProject = (parent as? MultiBranchProject<*, *>) ?: return null
    return multiBranchProject.getSCMSources()
        .firstOrNull { it.id == branchJobProperty.branch.sourceId } as? SpaceSCMSource
}

fun MultiBranchProject<*, *>.getProjectConnection(spaceConnectionId: String, spaceProjectKey: String) =
    ExtensionList.lookupSingleton(SpacePluginConfiguration::class.java).connections
        .firstOrNull { it.id == spaceConnectionId }
        ?.let { rootConnection ->
            rootConnection.projectConnectionsByMultibranchFolder?.get(getFullName())
                ?.firstOrNull { it.projectKey == spaceProjectKey }
                ?.let { it to rootConnection.baseUrl }
        }

fun Job<*,*>.getSpaceClientId() =
    getProjectConnection()?.first?.clientId

fun getItemByName(itemFullName: String) =
    ACL.as2(ACL.SYSTEM2).use { Jenkins.get().getItem(itemFullName) }

private val LOGGER = Logger.getLogger("JobExtensions")
